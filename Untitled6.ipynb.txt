{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "4Bouj0b1k_TH",
        "outputId": "30cad42d-cc37-4825-b904-342f11f16c35"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Integral Value:\n",
            "531.203388133581\n",
            "Integration Error:\n",
            "5.897542322647953e-12\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Import needed functions.\"\n",
        "import numpy as np\n",
        "from scipy import integrate\n",
        "import matplotlib.pyplot as plotlib\n",
        "\n",
        "# Define parameters.\n",
        "x_start = 2\n",
        "x_stop = 4\n",
        "x_steps_interval = 0.01\n",
        "\n",
        "# Define an array of data points.\n",
        "x_values = np.arange(x_start, x_stop, x_steps_interval)\n",
        "y_values = ((x_values)**2)*np.exp(x_values)\n",
        "\n",
        "# Plot the function curve.\n",
        "plotlib.plot(x_values, y_values)\n",
        "\n",
        "# Define a lambda function for integration over x values.\n",
        "integration_function = lambda x: (x**2)*np.exp(x)\n",
        "\n",
        "# Calculate the integral.\n",
        "integral, error = integrate.quad(integration_function, x_start, x_stop)\n",
        "\n",
        "# Print the integration results.\n",
        "print(\"Integral Value:\")\n",
        "print(integral)\n",
        "print(\"Integration Error:\")\n",
        "print(error)\n",
        "\n",
        "# Display the plot.\n",
        "plotlib.xlabel('x')\n",
        "plotlib.ylabel('y')\n",
        "plotlib.show()"
      ]
    }
  ]
}